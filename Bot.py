import telebot
import buttons as bt
import database as db
from geopy import Photon

geolocator = Photon(
    user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36")
bot = telebot.TeleBot(token="7639143796:AAE1LPtVUdc4H0VkUhjOoktm4_p9RW3wJKI")
users = {}

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!")
    checker = db.check_user(user_id)
    if checker:
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=bt.main_menu_kb())
    else:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=bt.phone_button())
    bot.register_next_step_handler(message, get_phone_number, name)

def get_phone_number(message, name):
    user_id = message.from_user.id
    if message.contact:
        phone_number = message.contact.phone_number
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é", reply_markup=bt.location_button())
        bot.register_next_step_handler(message, get_location, name, phone_number)
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é")
        bot.register_next_step_handler(message, get_phone_number, name)

def get_location(message, name, phone_number):
    user_id = message.from_user.id
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
        address = geolocator.reverse((latitude, longitude)).address

        db.add_user(name=name, phone_number=phone_number, user_id=user_id)
        bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –í–∞—à –∞–¥—Ä–µ—Å: {address}")
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=bt.main_menu_kb())
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é")
        bot.register_next_step_handler(message, get_location, name, phone_number)

@bot.message_handler(content_types=["text"])
def main_menu(message):
    user_id = message.from_user.id
    if message.text == "üç¥–ú–µ–Ω—é":
        all_products = db.get_pr_id_name()
        if not all_products:
            bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=bt.products_in(all_products))
    elif message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        show_cart(user_id)
    elif message.text == "‚úíÔ∏è–û—Ç–∑—ã–≤":
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞:")
        bot.register_next_step_handler(message, handle_feedback)

def show_cart(user_id):
    cart = db.get_user_cart(user_id)
    full_text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total_price = 0
    for idx, product in enumerate(cart, 1):
        full_text += f"{idx}. {product[0]} x {product[1]} = {product[2]}\n"
        total_price += product[2]
    bot.send_message(user_id, full_text + f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º",
                     reply_markup=bt.get_cart_kb(db.get_card_id_name(user_id)))

def handle_feedback(message):
    user_id = message.from_user.id
    feedback = message.text
    # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

@bot.callback_query_handler(lambda call: call.data == "order")
def order(call):
    user_id = call.message.chat.id
    cart = db.get_user_cart(user_id)
    user_info = db.get_all_users()
    user_data = [u for u in user_info if u[0] == user_id][0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    name, phone_number = user_data[1], user_data[2]

    full_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {name} (—Ç–µ–ª: {phone_number}):\n"
    total_price = 0
    for idx, product in enumerate(cart, 1):
        full_text += f"{idx}. {product[0]} x {product[1]} = {product[2]}\n"
        total_price += product[2]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_chat_id = -4547664725
    bot.send_message(manager_chat_id, full_text + f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç" –∏ "–û—Ç–∫–ª–æ–Ω–µ–Ω"
    markup = telebot.types.InlineKeyboardMarkup()
    accepted = telebot.types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç", callback_data="accepted")
    declined = telebot.types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–µ–Ω", callback_data="declined")
    markup.add(accepted, declined)

    bot.send_message(manager_chat_id, "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", reply_markup=markup)
    bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=bt.main_menu_kb())
    db.delete_user_cart(user_id)

@bot.callback_query_handler(lambda call: call.data in ["accepted", "declined"])
def order_status(call):
    if call.data == "accepted":
        bot.send_message(call.message.chat.id, "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!")
    elif call.data == "declined":
        bot.send_message(call.message.chat.id, "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

bot.infinity_polling()
